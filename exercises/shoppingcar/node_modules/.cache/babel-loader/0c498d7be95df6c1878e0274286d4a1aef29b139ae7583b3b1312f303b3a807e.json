{"ast":null,"code":"import Header from '@/components/Header.vue';\nimport Footer from '@/components/Footer.vue';\nimport Item from '@/components/Item.vue';\nimport EventBus from './components/EventBus';\nexport default {\n  data() {\n    return {\n      itemLists: [{\n        id: 1,\n        status: true,\n        src: '...',\n        info: '商品1',\n        price: 1.99,\n        count: 1\n      }, {\n        id: 2,\n        status: false,\n        src: '...',\n        info: '商品2',\n        price: 1.00,\n        count: 1\n      }, {\n        id: 3,\n        status: true,\n        src: '...',\n        info: '商品3',\n        price: 1.89,\n        count: 1\n      }]\n      // // 结算商品总数量\n      // itemsCount: 0,\n      // // 结算商品总金额\n      // itemsCost: 0,\n      // // 结算商品类型数量(几种商品 -> 用来计算是否全选   computed计算属性最优)\n      // itemStatusAll: false\n    };\n  },\n  components: {\n    Header,\n    Item,\n    Footer\n  },\n  computed: {\n    itemsCount() {\n      return this.itemLists.filter(item => item.status).reduce((itemsCount, item) => {\n        return itemsCount + item.count;\n      }, 0);\n    },\n    itemsCost() {\n      return this.itemLists.filter(item => item.status).reduce((itemsCost, Item) => {\n        return itemsCost + Item.count * Item.price;\n      }, 0).toFixed(2) - '0';\n    },\n    itemStatusAll() {\n      return this.itemLists.every(item => item.status);\n    }\n  },\n  methods: {\n    // item组件中单个商品状态切换反馈至App根组件中 更新商品列表itemLists信息\n    ItemToApp(id, status, count) {\n      this.itemLists[id - 1].status = status;\n      this.itemLists[id - 1].count = count;\n    },\n    // 页面刚加载时便计算已选定商品类型数量、商品数量、商品总额传递给Footer组件\n    AppToFooter() {\n      // 商品数量\n      this.itemsCount = this.itemLists.filter(item => item.status).reduce((itemsCount, item) => {\n        return itemsCount + item.count;\n      }, 0);\n      // 商品总额\n      this.itemsCost = this.itemLists.filter(item => item.status).reduce((itemsCost, Item) => {\n        return itemsCost + Item.count * Item.price;\n      }, 0).toFixed(2) - '0';\n      // 商品类型数量\n      this.itemCount = this.itemLists.filter(item => item.status).length;\n    }\n  },\n  updated() {\n    //函数复用\n    // this.AppToFooter()\n    //兄弟组件传递信息(其实是根子组件-ref只能传递初始值)\n    // EventBus.$emit(\"AppToFooter\", this.itemsCount, this.itemsCost, this.itemCount)\n  },\n  created() {\n    //函数复用\n    // this.AppToFooter()\n  }\n};","map":{"version":3,"names":["Header","Footer","Item","EventBus","data","itemLists","id","status","src","info","price","count","components","computed","itemsCount","filter","item","reduce","itemsCost","toFixed","itemStatusAll","every","methods","ItemToApp","AppToFooter","itemCount","length","updated","created"],"sources":["src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header></Header>\n        <!-- 给item组件传值 -->\n        <Item v-for=\"(item, index) in itemLists\" :key=\"index\" :idRef=\"item.id\" :statusRef=\"item.status\" :srcRef=item.src\n            :infoRef=item.info :priceRef=item.price :countRef=\"item.count\" @ItemToApp=\"ItemToApp\">\n        </Item>\n        <!-- 给Footer组件传值 -->\n        <Footer :itemsCountRef=\"itemsCount\" :itemsCostRef=\"itemsCost\" :itemStatusAllRef=\"itemStatusAll\"></Footer>\n    </div>\n</template>\n\n<script>\nimport Header from '@/components/Header.vue';\nimport Footer from '@/components/Footer.vue';\nimport Item from '@/components/Item.vue';\nimport EventBus from './components/EventBus';\n\nexport default {\n    data() {\n        return {\n            itemLists: [\n                { id: 1, status: true, src: '...', info: '商品1', price: 1.99, count: 1 },\n                { id: 2, status: false, src: '...', info: '商品2', price: 1.00, count: 1 },\n                { id: 3, status: true, src: '...', info: '商品3', price: 1.89, count: 1 },\n            ],\n            // // 结算商品总数量\n            // itemsCount: 0,\n            // // 结算商品总金额\n            // itemsCost: 0,\n            // // 结算商品类型数量(几种商品 -> 用来计算是否全选   computed计算属性最优)\n            // itemStatusAll: false\n        }\n    },\n    components: {\n        Header,\n        Item,\n        Footer,\n    },\n    computed: {\n        itemsCount() {\n            return this.itemLists.filter(item => item.status).reduce((itemsCount, item) => {\n                return itemsCount + item.count\n            }, 0)\n        },\n        itemsCost() {\n            return this.itemLists.filter(item => item.status).reduce((itemsCost, Item) => {\n                return itemsCost + Item.count * Item.price\n            }, 0).toFixed(2) - '0'\n        },\n        itemStatusAll() {\n            return this.itemLists.every(item => item.status)\n        }\n    },\n    methods: {\n        // item组件中单个商品状态切换反馈至App根组件中 更新商品列表itemLists信息\n        ItemToApp(id, status, count) {\n            this.itemLists[id - 1].status = status\n            this.itemLists[id - 1].count = count\n        },\n        // 页面刚加载时便计算已选定商品类型数量、商品数量、商品总额传递给Footer组件\n        AppToFooter() {\n            // 商品数量\n            this.itemsCount = this.itemLists.filter(item => item.status).reduce((itemsCount, item) => {\n                return itemsCount + item.count\n            }, 0)\n            // 商品总额\n            this.itemsCost = this.itemLists.filter(item => item.status).reduce((itemsCost, Item) => {\n                return itemsCost + Item.count * Item.price\n            }, 0).toFixed(2) - '0'\n            // 商品类型数量\n            this.itemCount = (this.itemLists.filter(item => item.status)).length\n        }\n    },\n    updated() {\n        //函数复用\n        // this.AppToFooter()\n        //兄弟组件传递信息(其实是根子组件-ref只能传递初始值)\n        // EventBus.$emit(\"AppToFooter\", this.itemsCount, this.itemsCost, this.itemCount)\n    },\n    created() {\n        //函数复用\n        // this.AppToFooter()\n    }\n}\n</script>\n\n<style lang=\"less\" scoped></style>"],"mappings":"AAaA,OAAAA,MAAA;AACA,OAAAC,MAAA;AACA,OAAAC,IAAA;AACA,OAAAC,QAAA;AAEA;EACAC,KAAA;IACA;MACAC,SAAA,GACA;QAAAC,EAAA;QAAAC,MAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAL,EAAA;QAAAC,MAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA,GACA;QAAAL,EAAA;QAAAC,MAAA;QAAAC,GAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,KAAA;MAAA;MAEA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;EACAC,UAAA;IACAZ,MAAA;IACAE,IAAA;IACAD;EACA;EACAY,QAAA;IACAC,WAAA;MACA,YAAAT,SAAA,CAAAU,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAT,MAAA,EAAAU,MAAA,EAAAH,UAAA,EAAAE,IAAA;QACA,OAAAF,UAAA,GAAAE,IAAA,CAAAL,KAAA;MACA;IACA;IACAO,UAAA;MACA,YAAAb,SAAA,CAAAU,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAT,MAAA,EAAAU,MAAA,EAAAC,SAAA,EAAAhB,IAAA;QACA,OAAAgB,SAAA,GAAAhB,IAAA,CAAAS,KAAA,GAAAT,IAAA,CAAAQ,KAAA;MACA,MAAAS,OAAA;IACA;IACAC,cAAA;MACA,YAAAf,SAAA,CAAAgB,KAAA,CAAAL,IAAA,IAAAA,IAAA,CAAAT,MAAA;IACA;EACA;EACAe,OAAA;IACA;IACAC,UAAAjB,EAAA,EAAAC,MAAA,EAAAI,KAAA;MACA,KAAAN,SAAA,CAAAC,EAAA,MAAAC,MAAA,GAAAA,MAAA;MACA,KAAAF,SAAA,CAAAC,EAAA,MAAAK,KAAA,GAAAA,KAAA;IACA;IACA;IACAa,YAAA;MACA;MACA,KAAAV,UAAA,QAAAT,SAAA,CAAAU,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAT,MAAA,EAAAU,MAAA,EAAAH,UAAA,EAAAE,IAAA;QACA,OAAAF,UAAA,GAAAE,IAAA,CAAAL,KAAA;MACA;MACA;MACA,KAAAO,SAAA,QAAAb,SAAA,CAAAU,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAT,MAAA,EAAAU,MAAA,EAAAC,SAAA,EAAAhB,IAAA;QACA,OAAAgB,SAAA,GAAAhB,IAAA,CAAAS,KAAA,GAAAT,IAAA,CAAAQ,KAAA;MACA,MAAAS,OAAA;MACA;MACA,KAAAM,SAAA,QAAApB,SAAA,CAAAU,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAT,MAAA,EAAAmB,MAAA;IACA;EACA;EACAC,QAAA;IACA;IACA;IACA;IACA;EAAA,CACA;EACAC,QAAA;IACA;IACA;EAAA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}